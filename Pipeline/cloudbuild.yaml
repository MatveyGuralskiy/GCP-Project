steps:
  - name: "gcr.io/cloud-builders/git"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        git fetch origin features
        git checkout features

  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Creating .env file..."
        echo "PORT=$(gcloud secrets versions access latest --secret=PORT)" >> Application/.env
        echo "JWT_SECRET=$(gcloud secrets versions access latest --secret=JWT_SECRET)" >> Application/.env
        echo "GCP_KEYFILE_PATH=$(gcloud secrets versions access latest --secret=GCP_KEYFILE_PATH)" >> Application/.env
        echo "GCP_BUCKET_TEMPORARY=$(gcloud secrets versions access latest --secret=GCP_BUCKET_TEMPORARY)" >> Application/.env
        echo "GCP_BUCKET_MAIN=$(gcloud secrets versions access latest --secret=GCP_BUCKET_MAIN)" >> Application/.env
        echo "FIREBASE_DB_URL=$(gcloud secrets versions access latest --secret=FIREBASE_DB_URL)" >> Application/.env
        echo "FUNCTION_COPY_URL=$(gcloud secrets versions access latest --secret=FUNCTION_COPY_URL)" >> Application/.env
        echo "FUNCTION_DELETE_URL=$(gcloud secrets versions access latest --secret=FUNCTION_DELETE_URL)" >> Application/.env

  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Creating keys directory..."
        mkdir -p Application/keys  # Create the keys directory if it doesn't exist
        gcloud secrets versions access latest --secret=GCP_KEYFILE > Application/keys/networking.json

  - name: "node:18"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd Application
        npm install

  - name: "node:18"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd Application
        npm test

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd Application
        docker build -t "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0" .

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        docker push "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0"

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        docker run --name my-app -d -p 80:3000 "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0"

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Checking if Docker container is running..."
        if docker ps | grep my-app; then
          echo "✔ Docker container 'my-app' is running."
          echo "Container details:"
          docker inspect my-app

          # Network and connectivity check using curl
          echo "Checking network connectivity..."
          docker network ls
          docker network inspect bridge
          CONTAINER_IP=$$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' my-app)
          echo "Container IP: $CONTAINER_IP"
          echo "Attempting to reach the container IP directly..."
          curl -v http://$$CONTAINER_IP:3000

          echo "Waiting for the app to start..."
          for i in {1..12}; do
            RESPONSE=$$(curl -v --write-out "%{http_code}" --silent --output /dev/null http://localhost:80)
            if [ "$$RESPONSE" -eq 200 ]; then
              echo "✔ Website is up and running!"
              exit 0
            fi
            echo "Attempt $i: Website not ready yet. Status code: $RESPONSE. Waiting..."
            sleep 5
          done
          echo "Website did not become accessible within the allocated time."
          echo "Final container logs:"
          docker logs my-app
          exit 1
        else
          echo "Docker container 'my-app' is not running."
          echo "All running containers:"
          docker ps
          echo "All containers (including stopped):"
          docker ps -a
          echo "Container logs:"
          docker logs my-app || true
          exit 1
        fi

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        source /workspace/build.env
        docker stop my-app
        docker rm my-app
        docker rmi "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0"

substitutions:
  _PROJECT_ID: networking-438508
  _REPOSITORY_NAME: app-gcp
  _REGION: europe-west1

logsBucket: "gs://matvey-ci-cd"
serviceAccount: "matvey-admin@networking-438508.iam.gserviceaccount.com"
