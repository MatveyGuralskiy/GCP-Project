steps:
  - name: "gcr.io/cloud-builders/git"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        git fetch origin features
        git checkout features

  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Creating .env file..."
        echo "PORT=$(gcloud secrets versions access latest --secret=PORT)" >> Application/.env
        echo "JWT_SECRET=$(gcloud secrets versions access latest --secret=JWT_SECRET)" >> Application/.env
        echo "GCP_KEYFILE_PATH=$(gcloud secrets versions access latest --secret=GCP_KEYFILE_PATH)" >> Application/.env
        echo "GCP_BUCKET_TEMPORARY=$(gcloud secrets versions access latest --secret=GCP_BUCKET_TEMPORARY)" >> Application/.env
        echo "GCP_BUCKET_MAIN=$(gcloud secrets versions access latest --secret=GCP_BUCKET_MAIN)" >> Application/.env
        echo "FIREBASE_DB_URL=$(gcloud secrets versions access latest --secret=FIREBASE_DB_URL)" >> Application/.env
        echo "FUNCTION_COPY_URL=$(gcloud secrets versions access latest --secret=FUNCTION_COPY_URL)" >> Application/.env
        echo "FUNCTION_DELETE_URL=$(gcloud secrets versions access latest --secret=FUNCTION_DELETE_URL)" >> Application/.env

  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Creating keys directory..."
        export GCP_KEYFILE=$(gcloud secrets versions access latest --secret=GCP_KEYFILE)
        mkdir -p Application/keys  # Create the keys directory if it doesn't exist
        echo "${GCP_KEYFILE}" > Application/keys/networking.json

  - name: "node:18"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd Application
        npm install

  - name: "node:18"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd Application
        npm test

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd Application
        docker build -t "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0" .

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        docker push "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0"

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        docker run --name my-app -d -p 80:80 "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0"

  - name: "gcr.io/cloud-builders/curl"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Waiting for the app to start..."
        sleep 15
        RESPONSE=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost)
        if [ "$$RESPONSE" -eq 200 ]; then
          echo "âœ” Website is up and running!"
        else
          echo "Website is not accessible. Status code: $$RESPONSE"
          exit 1
        fi

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        source /workspace/build.env
        docker stop my-app
        docker rm my-app
        docker rmi "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0"

substitutions:
  _PROJECT_ID: networking-438508
  _REPOSITORY_NAME: app-gcp
  _REGION: europe-west1

logsBucket: "gs://matvey-ci-cd"
serviceAccount: "matvey-admin@networking-438508.iam.gserviceaccount.com"
