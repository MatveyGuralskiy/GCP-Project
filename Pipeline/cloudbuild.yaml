steps:
  - name: "gcr.io/cloud-builders/git"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        git fetch origin features
        git checkout features

  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Creating .env file..."
        echo "PORT=$(gcloud secrets versions access latest --secret=PORT)" >> Application/.env
        echo "JWT_SECRET=$(gcloud secrets versions access latest --secret=JWT_SECRET)" >> Application/.env
        echo "GCP_KEYFILE_PATH=$(gcloud secrets versions access latest --secret=GCP_KEYFILE_PATH)" >> Application/.env
        echo "GCP_BUCKET_TEMPORARY=$(gcloud secrets versions access latest --secret=GCP_BUCKET_TEMPORARY)" >> Application/.env
        echo "GCP_BUCKET_MAIN=$(gcloud secrets versions access latest --secret=GCP_BUCKET_MAIN)" >> Application/.env
        echo "FIREBASE_DB_URL=$(gcloud secrets versions access latest --secret=FIREBASE_DB_URL)" >> Application/.env
        echo "FUNCTION_COPY_URL=$(gcloud secrets versions access latest --secret=FUNCTION_COPY_URL)" >> Application/.env
        echo "FUNCTION_DELETE_URL=$(gcloud secrets versions access latest --secret=FUNCTION_DELETE_URL)" >> Application/.env

  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Creating keys directory..."
        mkdir -p Application/keys  # Create the keys directory if it doesn't exist
        gcloud secrets versions access latest --secret=GCP_KEYFILE > Application/keys/networking.json

  - name: "node:18"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd Application
        npm install

  - name: "node:18"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd Application
        npm test

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Cleaning up unused Docker containers and images..."
        docker container prune -f
        docker rmi $(docker images -f "dangling=true" -q) || true

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd Application
        docker build -t "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0" .

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        docker push "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0"

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        docker run --name my-app -d -p 3000:3000 "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0"

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        if ! docker ps | grep -q my-app; then
          echo "Docker container 'my-app' is not running."
          docker ps -a
          docker logs my-app || true
          exit 1
        fi

        echo "✔ Docker container 'my-app' is running."

        echo "Checking application status..."
        for i in {1..3}; do
          RESPONSE=$$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          if [ "$$RESPONSE" -eq 200 ]; then
            echo "✔ Application page is accessible"
            break
          fi
          echo "Attempt $$i: Application not accessible yet. HTTP status: $$RESPONSE. Retrying in 5 seconds..."
          sleep 5
        done

        # Check final response
        if [ "$$RESPONSE" -ne 200 ]; then
          echo "Failed to access application page. HTTP status code: $$RESPONSE"
          docker logs my-app  # Print logs for debugging
          exit 1
        fi

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        source /workspace/build.env
        docker stop my-app
        docker rm my-app
        docker rmi "$_REGION-docker.pkg.dev/$_PROJECT_ID/$_REPOSITORY_NAME/app:V1.0"

substitutions:
  _PROJECT_ID: networking-438508
  _REPOSITORY_NAME: app-gcp
  _REGION: europe-west1

logsBucket: "gs://matvey-ci-cd"
serviceAccount: "matvey-admin@networking-438508.iam.gserviceaccount.com"
