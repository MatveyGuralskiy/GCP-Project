substitutions:
  _REGION: $(gcloud secrets versions access latest --secret=REGION)
  _PROJECT_ID: $(gcloud secrets versions access latest --secret=PROJECT_ID)
  _REPOSITORY_NAME: $(gcloud secrets versions access latest --secret=REPOSITORY_NAME)
  _LOGS_BUCKET: $(gcloud secrets versions access latest --secret=LOGS_BUCKET)
  _SERVICE_ACCOUNT: $(gcloud secrets versions access latest --secret=SERVICE_ACCOUNT)

steps:
  - name: "gcr.io/cloud-builders/git"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        git fetch origin features
        git checkout features

  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Fetching secret values..."
        echo "PROJECT_ID=${_PROJECT_ID}" >> /workspace/build.env
        echo "REPOSITORY_NAME=${_REPOSITORY_NAME}" >> /workspace/build.env
        echo "REGION=${_REGION}" >> /workspace/build.env
        echo "LOGS_BUCKET=${_LOGS_BUCKET}" >> /workspace/build.env

        echo "Creating .env file..."
        echo "PORT=$(gcloud secrets versions access latest --secret=PORT)" >> Application/.env
        echo "JWT_SECRET=$(gcloud secrets versions access latest --secret=JWT_SECRET)" >> Application/.env
        echo "GCP_KEYFILE_PATH=$(gcloud secrets versions access latest --secret=GCP_KEYFILE_PATH)" >> Application/.env
        echo "GCP_BUCKET_TEMPORARY=$(gcloud secrets versions access latest --secret=GCP_BUCKET_TEMPORARY)" >> Application/.env
        echo "GCP_BUCKET_MAIN=$(gcloud secrets versions access latest --secret=GCP_BUCKET_MAIN)" >> Application/.env
        echo "FIREBASE_DB_URL=$(gcloud secrets versions access latest --secret=FIREBASE_DB_URL)" >> Application/.env
        echo "FUNCTION_COPY_URL=$(gcloud secrets versions access latest --secret=FUNCTION_COPY_URL)" >> Application/.env
        echo "FUNCTION_DELETE_URL=$(gcloud secrets versions access latest --secret=FUNCTION_DELETE_URL)" >> Application/.env

  - name: "node:18"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd Application
        npm install

  - name: "node:18"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        cd Application
        npm test

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        source /workspace/build.env
        cd Application
        docker build -t "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_NAME}/app:V1.0" .

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        source /workspace/build.env
        docker push "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_NAME}/app:V1.0"

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        source /workspace/build.env
        docker run --name my-app -d -p 80:80 "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_NAME}/app:V1.0"

  - name: "gcr.io/cloud-builders/curl"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Waiting for the app to start..."
        sleep 30  # Wait for 30 seconds to allow the app to initialize
        RESPONSE=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost)
        if [ "$RESPONSE" -eq 200 ]; then
          echo "âœ” Website is up and running!"
        else
          echo "Website is not accessible. Status code: $RESPONSE"
          exit 1
        fi

  - name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        source /workspace/build.env
        docker stop my-app
        docker rm my-app
        docker rmi "${_REGION}-docker.pkg.dev/${_PROJECT_ID}/${_REPOSITORY_NAME}/app:V1.0"

logsBucket: $_LOGS_BUCKET
serviceAccount: $_SERVICE_ACCOUNT

options:
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
